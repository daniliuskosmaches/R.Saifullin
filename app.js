require('dotenv').config();
const express = require('express');
const path = require('path');
const helmet = require('helmet');
const cors = require('cors');
const rateLimit = require('express-rate-limit');
const nodemailer = require('nodemailer');
const fs = require('fs');
const crypto = require('crypto');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = process.env.PORT || 3000;
const EMAIL_CONFIG = {
  service: process.env.EMAIL_SERVICE || 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  },
  from: process.env.EMAIL_FROM || 'no-reply@childparty.com'
};
const MAX_EMAILS_PER_CLIENT = 3;
const PRICE_SECRET = process.env.PRICE_SECRET || crypto.randomBytes(32).toString('hex');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª
let bookings = [];
const emailCounts = {};
const DATA_FILE = 'data.json';

// –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
function loadData() {
  try {
    if (fs.existsSync(DATA_FILE)) {
      const data = JSON.parse(fs.readFileSync(DATA_FILE));
      bookings = data.bookings || [];
      Object.assign(emailCounts, data.emailCounts || {});
      console.log('Data loaded from file');
    }
  } catch (err) {
    console.error('Error loading data:', err);
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
function saveData() {
  const data = {
    bookings,
    emailCounts
  };
  fs.writeFileSync(DATA_FILE, JSON.stringify(data));
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport(EMAIL_CONFIG);

// –ú–∏–¥–ª–≤–∞—Ä—ã
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://cdnjs.cloudflare.com"],
      scriptSrc: ["'self'", "'unsafe-inline'"],
      imgSrc: ["'self'", "data:", "https:"],
      mediaSrc: ["'self'", "https:"],
      fontSrc: ["'self'", "https://cdnjs.cloudflare.com"]
    }
  }
}));
app.use(cors());
app.use(express.json({ limit: '10kb' }));

// –°–Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º —Ñ–∞–π–ª–∞–º
app.get([
  '/app.js',
  '/server.js', 
  '/package.json', 
  '/package-lock.json', 
  '/node_modules/*',
  '/.env',
  '/.git/*',
  '/data.json',
  '/.gitignore',
  '/README.md'
], (req, res) => {
  console.log('Blocked access to server file:', req.path);
  res.status(404).send('Not found');
});

// –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ .js —Ñ–∞–π–ª–æ–≤ –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
app.get('*.js', (req, res, next) => {
  // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ js —Ñ–∞–π–ª—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
  if (req.path.startsWith('/js/') || 
      req.path.startsWith('/scripts/') || 
      req.path.startsWith('/vendor/') ||
      req.path.startsWith('/assets/') ||
      req.path.startsWith('/static/')) {
    next();
  } else {
    console.log('Blocked JS file access:', req.path);
    res.status(404).send('Not found');
  }
});

// –õ–∏–º–∏—Ç–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è API
const apiLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests, please try again later'
});
app.use('/api/', apiLimiter);

// –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(__dirname, {
  setHeaders: (res, filePath) => {
    const ext = path.extname(filePath).toLowerCase();
    const allowedExtensions = ['.html', '.css', '.js', '.png', '.jpg', '.jpeg', '.gif', '.ico', '.mp4', '.webm', '.svg', '.woff', '.woff2', '.ttf', '.eot'];
    
    if (!allowedExtensions.includes(ext)) {
      res.status(404).end();
      return;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ Content-Type
    const mimeTypes = {
      '.css': 'text/css',
      '.js': 'application/javascript',
      '.png': 'image/png',
      '.jpg': 'image/jpeg',
      '.jpeg': 'image/jpeg',
      '.gif': 'image/gif',
      '.ico': 'image/x-icon',
      '.mp4': 'video/mp4',
      '.webm': 'video/webm',
      '.svg': 'image/svg+xml',
      '.woff': 'font/woff',
      '.woff2': 'font/woff2',
      '.ttf': 'font/ttf',
      '.eot': 'application/vnd.ms-fontobject'
    };

    if (mimeTypes[ext]) {
      res.setHeader('Content-Type', mimeTypes[ext]);
    }
  }
}));

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
function createPriceSignature(productId, price, type = 'character') {
  const data = `${type}:${productId}:${price}:${Date.now()}`;
  const signature = crypto.createHmac('sha256', PRICE_SECRET)
    .update(data)
    .digest('hex');
  
  return { price, signature, timestamp: Date.now() };
}

function verifyPriceSignature(productId, price, signature, timestamp, type = 'character') {
  const data = `${type}:${productId}:${price}:${timestamp}`;
  const expectedSignature = crypto.createHmac('sha256', PRICE_SECRET)
    .update(data)
    .digest('hex');
  
  return expectedSignature === signature && 
         (Date.now() - timestamp) < 300000; // 5 –º–∏–Ω—É—Ç expiry
}

function getRealPrice(productId, type = 'character') {
  let data;
  switch (type) {
    case 'character':
      data = charactersData.find(c => c.id === productId);
      break;
    case 'show':
      data = showsData.find(s => s.id === productId);
      break;
    case 'master':
      data = masterClassesData.find(m => m.id === productId);
      break;
    case 'additional':
      data = additionalServices.find(a => a.id === productId);
      break;
    default:
      return 0;
  }
  return data ? data.price : 0;
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
const charactersData = [
  { id: 1, name: "–ß–µ–ª–æ–≤–µ–∫-–ü–∞—É–∫", desc: "–õ—é–±–∏–º—ã–π —Å—É–ø–µ—Ä–≥–µ—Ä–æ–π –¥–µ—Ç–µ–π", image: "/images/—á–µ–ª–æ–≤–µ–∫ –ø–∞—É–∫ –Ω–æ–≤—ã–π.PNG", price: 5000, video: "/videos/spiderman.mp4" },
  { id: 2, name: "–ñ–µ–ª–µ–∑–Ω—ã–π –ß–µ–ª–æ–≤–µ–∫", desc: "–ì–µ–Ω–∏–π, –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä, –ø–ª–µ–π–±–æ–π, —Ñ–∏–ª–∞–Ω—Ç—Ä–æ–ø", image: "/images/–∂–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫.PNG", price: 6000, video: "/videos/ironman.mp4" },
  { id: 3, name: "–ë—ç—Ç–≥–µ—Ä–ª", desc: "–û—Ç–≤–∞–∂–Ω–∞—è –≥–µ—Ä–æ–∏–Ω—è –ì–æ—Ç—ç–º–∞", image: "/images/batgerl.PNG", price: 5500, video: "/videos/batgirl.mp4" },
  { id: 4, name: "–ü—å–µ—Ä–æ", desc: "–ì—Ä—É—Å—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫–æ–º–µ–¥–∏–∏", image: "/images/IMG_1662.PNG", price: 4500, video: "/videos/piero.mp4" },
  { id: 5, name: "–≠–ª—å–∑–∞", desc: "–°–Ω–µ–∂–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞ –∏–∑ –•–æ–ª–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–¥—Ü–∞", image: "/images/—ç–ª—å–∑–∞.PNG", price: 6500, video: "/videos/elsa.mp4" },
  { id: 6, name: "–ü–∏—Ä–∞—Ç", desc: "–û—Ç–≤–∞–∂–Ω—ã–π –º–æ—Ä—Å–∫–æ–π —Ä–∞–∑–±–æ–π–Ω–∏–∫", image: "/images/–ø–∏—Ä–∞—Ç.PNG", price: 5000, video: "/videos/pirate.mp4" },
  { id: 7, name: "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä", desc: "–Æ–Ω—ã–π –≤–æ–ª—à–µ–±–Ω–∏–∫ –∏–∑ –•–æ–≥–≤–∞—Ä—Ç—Å–∞", image: "/images/–≥–∞—Ä—Ä–∏ –ø–æ—Ç—Ç–µ—Ä.PNG", price: 6000, video: "/videos/harrypotter.mp4" },
  { id: 8, name: "–ß–µ—Ä–µ–ø–∞—à–∫–∏ –Ω–∏–Ω–¥–∑—è", desc: "–ß–µ—Ç–≤–µ—Ä–∫–∞ –≥–µ—Ä–æ–µ–≤-–º—É—Ç–∞–Ω—Ç–æ–≤", image: "/images/—á–µ—Ä–µ–ø–∞—à–∫–∏ –Ω–∏–Ω–¥–∑—è.PNG", price: 8000, video: "/videos/tmnt.mp4" },
  { id: 9, name: "–†—É—Å–∞–ª–æ—á–∫–∞", desc: "–ú–æ—Ä—Å–∫–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞", image: "/images/—Ä—É—Å–∞–ª–æ—á–∫–∞.PNG", price: 5500, video: "/videos/mermaid.mp4" },
  { id: 10, name: "–õ–µ–≥–æ –ù–∏–Ω–¥–∑—è–≥–æ", desc: "–ù–∏–Ω–¥–∑—è –∏–∑ –º–∏—Ä–∞ –õ–µgo", image: "/images/–ª–µ–≥–æ –Ω–∏–Ω–¥–∑—è–≥–æ.PNG", price: 5500, video: "/videos/ninjago.mp4" },
  { id: 11, name: "–ë–µ–ª–æ—Å–Ω–µ–∂–∫–∞", desc: "–°–∞–º–∞—è –¥–æ–±—Ä–∞—è –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞", image: "/images/–±–µ–ª–æ—Å–Ω–µ–∂–∫–∞.PNG", price: 5500, video: "/videos/snowwhite.mp4" },
  { id: 12, name: "–õ—É–Ω—Ç–∏–∫", desc: "–î–æ–±—Ä—ã–π –ø—Ä–∏—à–µ–ª–µ—Ü —Å –õ—É–Ω—ã", image: "/images/–ª—É–Ω—Ç–∏–∫.PNG", price: 5000, video: "/videos/luntik.mp4" }
];

const showsData = [
  { id: 1, name: "–•–∏–º–∏—á–µ—Å–∫–æ–µ –®–æ—É", desc: "–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –∂–∏–¥–∫–∏–º –∞–∑–æ—Ç–æ–º", image: "/images/chemistry.jpeg", price: 10000, video: "/videos/chemistry-show.mp4" },
  { id: 2, name: "–ë—É–º–∞–∂–Ω–æ–µ –®–æ—É", desc: "–ú—É–∑—ã–∫–∞, —Ç–∞–Ω—Ü—ã –∏ –º–æ—Ä–µ –±—É–º–∞–≥–∏", image: "/images/paper.jpeg", price: 12000, video: "/videos/paper-show.mp4" },
  { id: 3, name: "–®–æ—É –ü—É–∑—ã—Ä–µ–π", desc: "–í–æ–ª—à–µ–±–Ω—ã–π –º–∏—Ä –æ–≥—Ä–æ–º–Ω—ã—Ö –º—ã–ª—å–Ω—ã—Ö –ø—É–∑—ã—Ä–µ–π", image: "/images/bubble.jpeg", price: 8000, video: "/videos/bubble-show.mp4" },
  { id: 4, name: "–®–æ—É –º–∞–≥–∏–∏", desc: "–í–æ–ª—à–µ–±–Ω–æ–µ —à–æ—É –¥–ª—è –¥–µ—Ç–µ–π", image: "/images/majic.jpeg", price: 8000, video: "/videos/magic-show.mp4" }
];

const masterClassesData = [
  { id: 1, name: "–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—Å—Ç—é–º–æ–≤", desc: "–ù–∞—É—á–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ—Å—Ç—é–º—ã —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏", price: 2500, icon: "‚úÇÔ∏è" },
  { id: 2, name: "–ê–∫—Ç–µ—Ä—Å–∫–æ–µ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ", desc: "–û—Å–Ω–æ–≤—ã –ø–µ—Ä–µ–≤–æ–ø–ª–æ—â–µ–Ω–∏—è –≤ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π", price: 3000, icon: "üé≠" },
  { id: 3, name: "–ì—Ä–∏–º –∏ –º–∞–∫–∏—è–∂", desc: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –≥—Ä–∏–º–∞", price: 2800, icon: "üé®" }
];

const additionalServices = [
  { id: 1, name: "–¢–æ—Ä—Ç–∏–∫", price: 3000 },
  { id: 2, name: "–§–æ—Ç–æ–≥—Ä–∞—Ñ", price: 5000 },
  { id: 3, name: "–ü–∏–Ω—å—è—Ç–∞", price: 1500 }
];

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ —Å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
app.get('/api/init-data', (req, res) => {
  try {
    const signedCharacters = charactersData.map(char => ({
      ...char,
      signedPrice: createPriceSignature(char.id, char.price, 'character')
    }));

    const signedShows = showsData.map(show => ({
      ...show,
      signedPrice: createPriceSignature(show.id, show.price, 'show')
    }));

    const signedMasterClasses = masterClassesData.map(master => ({
      ...master,
      signedPrice: createPriceSignature(master.id, master.price, 'master')
    }));

    const signedAdditionalServices = additionalServices.map(service => ({
      ...service,
      signedPrice: createPriceSignature(service.id, service.price, 'additional')
    }));

    res.json({
      characters: signedCharacters,
      shows: signedShows,
      masterClasses: signedMasterClasses,
      additionalServices: signedAdditionalServices
    });
  } catch (error) {
    console.error('Error generating signed data:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// API: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
app.post('/api/bookings', async (req, res) => {
  try {
    const { 
      name, 
      phone, 
      email, 
      eventDate, 
      childBirthday, 
      packageType, 
      characters = [], 
      shows = [], 
      masterClasses = [], 
      additionalServices = [],
      total 
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!name || !phone || !eventDate || !childBirthday || !packageType) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    if (email && !/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      return res.status(400).json({ error: 'Invalid email format' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!/^\+7\s\(\d{3}\)\s\d{3}-\d{2}-\d{2}$/.test(phone)) {
      return res.status(400).json({ error: 'Invalid phone format' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç
    const eventDateObj = new Date(eventDate);
    const childBirthdayObj = new Date(childBirthday);
    const now = new Date();
    
    if (eventDateObj <= now) {
      return res.status(400).json({ error: 'Event date must be in the future' });
    }

    if (childBirthdayObj >= now) {
      return res.status(400).json({ error: 'Child birthday must be in the past' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    for (const char of characters) {
      if (!verifyPriceSignature(char.id, char.price, char.signature, char.timestamp, 'character')) {
        return res.status(400).json({ error: 'Invalid character price detected' });
      }
      
      const realPrice = getRealPrice(char.id, 'character');
      if (parseFloat(char.price) !== parseFloat(realPrice)) {
        return res.status(400).json({ error: 'Character price mismatch' });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω —à–æ—É
    for (const show of shows) {
      if (!verifyPriceSignature(show.id, show.price, show.signature, show.timestamp, 'show')) {
        return res.status(400).json({ error: 'Invalid show price detected' });
      }
      
      const realPrice = getRealPrice(show.id, 'show');
      if (parseFloat(show.price) !== parseFloat(realPrice)) {
        return res.status(400).json({ error: 'Show price mismatch' });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
    for (const master of masterClasses) {
      if (!verifyPriceSignature(master.id, master.price, master.signature, master.timestamp, 'master')) {
        return res.status(400).json({ error: 'Invalid master class price detected' });
      }
      
      const realPrice = getRealPrice(master.id, 'master');
      if (parseFloat(master.price) !== parseFloat(realPrice)) {
        return res.status(400).json({ error: 'Master class price mismatch' });
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–æ–ø. —É—Å–ª—É–≥
    for (const service of additionalServices) {
      if (!verifyPriceSignature(service.id, service.price, service.signature, service.timestamp, 'additional')) {
        return res.status(400).json({ error: 'Invalid additional service price detected' });
      }
      
      const realPrice = getRealPrice(service.id, 'additional');
      if (parseFloat(service.price) !== parseFloat(realPrice)) {
        return res.status(400).json({ error: 'Additional service price mismatch' });
      }
    }

    // –ü–µ—Ä–µ—Å—á–µ—Ç –æ–±—â–µ–π —Å—É–º–º—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    let calculatedTotal = 0;
    
    // –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–∞–∫–µ—Ç–∞
    const packagePrices = {
      basic: 10000,
      standard: 35000,
      premium: 55000,
      custom: 0
    };
    
    calculatedTotal += packagePrices[packageType] || 0;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥
    characters.forEach(char => calculatedTotal += parseFloat(char.price));
    shows.forEach(show => calculatedTotal += parseFloat(show.price));
    masterClasses.forEach(master => calculatedTotal += parseFloat(master.price));
    additionalServices.forEach(service => calculatedTotal += parseFloat(service.price));

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π —Å—É–º–º—ã
    if (Math.abs(parseFloat(total) - calculatedTotal) > 0.01) {
      return res.status(400).json({ 
        error: 'Total price mismatch', 
        calculatedTotal,
        receivedTotal: total 
      });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏
    const booking = {
      id: crypto.randomUUID(),
      name,
      phone,
      email,
      eventDate: eventDateObj,
      childBirthday: childBirthdayObj,
      packageType,
      characters,
      shows,
      masterClasses,
      additionalServices,
      totalPrice: calculatedTotal,
      createdAt: new Date(),
      ip: req.ip
    };

    bookings.push(booking);
    saveData();
    console.log(`New booking created: ${booking.id}`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    if (email) {
      const emailKey = email.toLowerCase();
      emailCounts[emailKey] = (emailCounts[emailKey] || 0) + 1;
      saveData();

      if (emailCounts[emailKey] <= MAX_EMAILS_PER_CLIENT) {
        try {
          await sendConfirmationEmail(booking);
          console.log(`Confirmation email sent to ${email}`);
        } catch (emailError) {
          console.error('Email sending error:', emailError);
        }
      } else {
        console.warn(`Email limit reached for ${email}`);
      }
    }

    res.status(201).json({ 
      success: true, 
      booking: {
        id: booking.id,
        totalPrice: booking.totalPrice,
        createdAt: booking.createdAt
      }
    });
  } catch (error) {
    console.error('Booking error:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// API: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
app.get('/api/bookings', (req, res) => {
  // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authHeader = req.headers.authorization;
  if (!authHeader || authHeader !== `Bearer ${process.env.ADMIN_TOKEN}`) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  res.json({ 
    success: true,
    count: bookings.length,
    bookings: bookings.slice(-100).map(b => ({
      id: b.id,
      name: b.name,
      phone: b.phone,
      email: b.email,
      eventDate: b.eventDate,
      packageType: b.packageType,
      totalPrice: b.totalPrice,
      createdAt: b.createdAt
    }))
  });
});

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
async function sendConfirmationEmail(booking) {
  const mailOptions = {
    from: EMAIL_CONFIG.from,
    to: booking.email,
    subject: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!',
    html: `
      <h1>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!</h1>
      <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –¥–µ—Ç—Å–∫–æ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞.</p>
      <h2>–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:</h2>
      <ul>
        <li>–ü–∞–∫–µ—Ç: ${booking.packageType}</li>
        <li>–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ${new Date(booking.eventDate).toLocaleDateString()}</li>
        <li>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${booking.totalPrice} ‚ÇΩ</li>
      </ul>
      <p>–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.</p>
    `
  };

  await transporter.sendMail(mailOptions);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ - –î–û–õ–ñ–ù–û –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú
app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'index.html'));
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
loadData();
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`Open in browser: http://localhost:${PORT}`);
  console.log('Price security enabled with HMAC signatures');
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
process.on('SIGINT', () => {
  saveData();
  process.exit();
});